Index: app/src/main/java/com/cjcj55/scrum_project_1/db/MySQLDatabaseHelper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.cjcj55.scrum_project_1.db;\r\n\r\nimport android.content.Context;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.Nullable;\r\n\r\nimport com.android.volley.AuthFailureError;\r\nimport com.android.volley.Request;\r\nimport com.android.volley.RequestQueue;\r\nimport com.android.volley.Response;\r\nimport com.android.volley.VolleyError;\r\nimport com.android.volley.toolbox.JsonObjectRequest;\r\nimport com.android.volley.toolbox.StringRequest;\r\nimport com.android.volley.toolbox.Volley;\r\nimport com.cjcj55.scrum_project_1.MainActivity;\r\nimport com.cjcj55.scrum_project_1.objects.UserCart;\r\nimport com.cjcj55.scrum_project_1.objects.catalog.CoffeeItemInCatalog;\r\nimport com.cjcj55.scrum_project_1.objects.catalog.FlavorItemInCatalog;\r\nimport com.cjcj55.scrum_project_1.objects.catalog.ToppingItemInCatalog;\r\nimport com.cjcj55.scrum_project_1.objects.catalog.order_items.CoffeeItem;\r\nimport com.cjcj55.scrum_project_1.objects.catalog.order_items.FlavorItem;\r\nimport com.cjcj55.scrum_project_1.objects.catalog.order_items.ToppingItem;\r\n\r\nimport org.json.JSONArray;\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.net.HttpURLConnection;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\npublic class MySQLDatabaseHelper {\r\n    public static void getAllTransactionsForUser(int userId, Context context, TransactionsCallback callback) {\r\n        List<UserCart> transactions = new ArrayList<>();\r\n\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST,\r\n                \"http://\" + MainActivity.LOCAL_IP + \"/getAllTransactionsForUser.php\",\r\n                new Response.Listener<String>() {\r\n                    @Override\r\n                    public void onResponse(String response) {\r\n                        try {\r\n                            JSONArray jsonArray = new JSONArray(response);\r\n                            for (int i = 0; i < jsonArray.length(); i++) {\r\n                                JSONObject jsonObject = jsonArray.getJSONObject(i);\r\n                                int transaction_id = jsonObject.getInt(\"transaction_id\");\r\n                                String timeOrdered = jsonObject.getString(\"time_ordered\");\r\n                                double price = jsonObject.getDouble(\"price\");\r\n\r\n                                List<CoffeeItem> coffeeItems = getCoffeeItemsForTransaction(transaction_id, context);\r\n\r\n                                UserCart userCart = new UserCart();\r\n                                for (CoffeeItem coffeeItem : coffeeItems) {\r\n                                    userCart.addCoffeeToCart(coffeeItem);\r\n                                }\r\n                                userCart.setTimeOrdered(timeOrdered);\r\n                                userCart.setPrice(price);\r\n                                userCart.setTransactionId(transaction_id);\r\n\r\n                                transactions.add(userCart);\r\n                            }\r\n                            callback.onTransactionsReceived(transactions);\r\n                        } catch (JSONException e) {\r\n                            throw new RuntimeException(e);\r\n                        }\r\n                    }\r\n                }, new Response.ErrorListener() {\r\n            @Override\r\n            public void onErrorResponse(VolleyError error) {\r\n                Toast.makeText(context, \"error:\" + error.getMessage(), Toast.LENGTH_LONG).show();\r\n            }\r\n        }) {\r\n            @Nullable\r\n            @Override\r\n            protected Map<String, String> getParams() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<>();\r\n                params.put(\"user_id\", Integer.toString(userId));\r\n                return params;\r\n            }\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(context);\r\n        queue.add(stringRequest);\r\n    }\r\n\r\n    public interface TransactionsCallback {\r\n        void onTransactionsReceived(List<UserCart> transactions);\r\n    }\r\n\r\n    private static List<CoffeeItem> getCoffeeItemsForTransaction(int transactionId, Context context) {\r\n        List<CoffeeItem> coffeeItems = new ArrayList<>();\r\n\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST,\r\n                \"http://\" + MainActivity.LOCAL_IP + \"/getCoffeeItemsForTransaction.php\",\r\n                new Response.Listener<String>() {\r\n\r\n                    @Override\r\n                    public void onResponse(String response) {\r\n                        try {\r\n                            JSONArray jsonArray = new JSONArray(response);\r\n                            for (int i = 0; i < jsonArray.length(); i++) {\r\n                                JSONObject jsonObject = jsonArray.getJSONObject(i);\r\n\r\n                                int coffee_id = jsonObject.getInt(\"coffee_id\");\r\n                                int beverage_count = jsonObject.getInt(\"beverage_count\");\r\n                                int order_coffee_id = jsonObject.getInt(\"order_coffee_id\");\r\n\r\n//                                System.out.println(coffee_id + \": \" + beverage_count + \", \" + order_coffee_id);\r\n\r\n                                // Get toppings for this coffee item\r\n                                List<ToppingItem> toppingItems = getToppingItemsForOrderCoffee(order_coffee_id, context);\r\n\r\n                                // Get flavors for this coffee item\r\n                                List<FlavorItem> flavorItems = getFlavorItemsForOrderCoffee(order_coffee_id, context);\r\n\r\n                                int coffeeIndex = -1;\r\n                                // Loop to find which coffee has id = coffeeId\r\n                                for (int j = 0; j < MainActivity.coffeeItemInCatalogTypes.size(); j++) {\r\n                                    if (MainActivity.coffeeItemInCatalogTypes.get(j).getId() == coffee_id) {\r\n                                        coffeeIndex = j;\r\n                                    }\r\n                                }\r\n\r\n                                CoffeeItem coffeeItem = new CoffeeItem(MainActivity.coffeeItemInCatalogTypes.get(coffeeIndex), beverage_count);\r\n                                coffeeItem.setToppingItemList(toppingItems);\r\n                                coffeeItem.setFlavorItemList(flavorItems);\r\n                                coffeeItems.add(coffeeItem);\r\n                            }\r\n                        } catch (JSONException e) {\r\n                            throw new RuntimeException(e);\r\n                        }\r\n                    }\r\n                }, new Response.ErrorListener() {\r\n                    @Override\r\n                    public void onErrorResponse(VolleyError error) {\r\n                        Toast.makeText(context, \"error:\" + error.getMessage(), Toast.LENGTH_LONG).show();\r\n                    }\r\n                })\r\n        {\r\n            @Nullable\r\n            @Override\r\n            protected Map<String, String> getParams() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<>();\r\n                params.put(\"transaction_id\", Integer.toString(transactionId));\r\n                return params;\r\n            }\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(context);\r\n        queue.add(stringRequest);\r\n\r\n        return coffeeItems;\r\n    }\r\n\r\n    private static List<ToppingItem> getToppingItemsForOrderCoffee(int orderCoffeeId, Context context) {\r\n        List<ToppingItem> toppingItems = new ArrayList<>();\r\n\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST,\r\n                \"http://\" + MainActivity.LOCAL_IP + \"/getToppingItemsForOrderCoffee.php\",\r\n                new Response.Listener<String>() {\r\n                    @Override\r\n                    public void onResponse(String response) {\r\n                        try {\r\n                            JSONArray jsonArray = new JSONArray(response);\r\n                            for (int i = 0; i < jsonArray.length(); i++) {\r\n                                JSONObject jsonObject = jsonArray.getJSONObject(i);\r\n\r\n                                int topping_id = jsonObject.getInt(\"topping_id\");\r\n\r\n//                                System.out.println(topping_id);\r\n\r\n                                int toppingIndex = -1;\r\n                                // Loop to find which topping has id = toppingId\r\n                                for (int j = 0; j < MainActivity.toppingItemInCatalogTypes.size(); j++) {\r\n                                    if (MainActivity.toppingItemInCatalogTypes.get(j).getId() == topping_id) {\r\n                                        toppingIndex = j;\r\n                                    }\r\n                                }\r\n                                ToppingItem toppingItem = new ToppingItem(MainActivity.toppingItemInCatalogTypes.get(toppingIndex));\r\n                                toppingItems.add(toppingItem);\r\n                            }\r\n                        } catch (JSONException e) {\r\n                            throw new RuntimeException(e);\r\n                        }\r\n                    }\r\n                }, new Response.ErrorListener() {\r\n            @Override\r\n            public void onErrorResponse(VolleyError error) {\r\n                Toast.makeText(context, \"error:\" + error.getMessage(), Toast.LENGTH_LONG).show();\r\n            }\r\n        })\r\n        {\r\n            @Nullable\r\n            @Override\r\n            protected Map<String, String> getParams() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<>();\r\n                params.put(\"order_coffee_id\", Integer.toString(orderCoffeeId));\r\n                return params;\r\n            }\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(context);\r\n        queue.add(stringRequest);\r\n\r\n        return toppingItems;\r\n    }\r\n\r\n    private static List<FlavorItem> getFlavorItemsForOrderCoffee(int orderCoffeeId, Context context) {\r\n        List<FlavorItem> flavorItems = new ArrayList<>();\r\n\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST,\r\n                \"http://\" + MainActivity.LOCAL_IP + \"/getFlavorItemsForOrderCoffee.php\",\r\n                new Response.Listener<String>() {\r\n                    @Override\r\n                    public void onResponse(String response) {\r\n                        try {\r\n                            JSONArray jsonArray = new JSONArray(response);\r\n                            for (int i = 0; i < jsonArray.length(); i++) {\r\n                                JSONObject jsonObject = jsonArray.getJSONObject(i);\r\n\r\n                                int flavor_id = jsonObject.getInt(\"flavor_id\");\r\n\r\n//                                System.out.println(flavor_id);\r\n\r\n                                int flavorIndex = -1;\r\n                                // Loop to find which topping has id = toppingId\r\n                                for (int j = 0; j < MainActivity.toppingItemInCatalogTypes.size(); j++) {\r\n                                    if (MainActivity.toppingItemInCatalogTypes.get(j).getId() == flavor_id) {\r\n                                        flavorIndex = j;\r\n                                    }\r\n                                }\r\n                                FlavorItem flavorItem = new FlavorItem(MainActivity.flavorItemInCatalogTypes.get(flavorIndex));\r\n                                flavorItems.add(flavorItem);\r\n                            }\r\n                        } catch (JSONException e) {\r\n                            throw new RuntimeException(e);\r\n                        }\r\n                    }\r\n                }, new Response.ErrorListener() {\r\n            @Override\r\n            public void onErrorResponse(VolleyError error) {\r\n                Toast.makeText(context, \"error:\" + error.getMessage(), Toast.LENGTH_LONG).show();\r\n            }\r\n        })\r\n        {\r\n            @Nullable\r\n            @Override\r\n            protected Map<String, String> getParams() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<>();\r\n                params.put(\"order_coffee_id\", Integer.toString(orderCoffeeId));\r\n                return params;\r\n            }\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(context);\r\n        queue.add(stringRequest);\r\n\r\n        return flavorItems;\r\n    }\r\n\r\n    public static void insertTransactionFromCart(int userId, UserCart userCart, String pickupTime, double totalPrice, Context context) {\r\n//        System.out.println(\"inserting transaction from cart\");\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST,\r\n                \"http://\" + MainActivity.LOCAL_IP + \"/insertTransactionFromCart.php\",\r\n                new Response.Listener<String>() {\r\n                    @Override\r\n                    public void onResponse(String response) {\r\n                        try {\r\n                            JSONObject jsonObject = new JSONObject(response);\r\n                            String success = jsonObject.getString(\"success\");\r\n                            if (success.equals(\"1\")) {\r\n                                int transaction_id = jsonObject.getInt(\"transaction_id\");\r\n                                Toast.makeText(context, \"Transaction successfully inserted!\", Toast.LENGTH_LONG).show();\r\n\r\n                                // Insert orders, toppings, and flavors for each coffee item\r\n                                List<CoffeeItem> coffeeItemList = userCart.getUserCart();\r\n                                for (CoffeeItem coffeeItem : coffeeItemList) {\r\n                                    insertOrderCoffee(transaction_id, coffeeItem, context);\r\n                                }\r\n                            } else {\r\n                                Toast.makeText(context, \"Unable to insert transaction\", Toast.LENGTH_LONG).show();\r\n                            }\r\n                        } catch (JSONException e) {\r\n                            throw new RuntimeException(e);\r\n                        }\r\n                    }\r\n                }, new Response.ErrorListener() {\r\n            @Override\r\n            public void onErrorResponse(VolleyError error) {\r\n                Toast.makeText(context, \"error:\" + error.getMessage(), Toast.LENGTH_LONG).show();\r\n            }\r\n        })\r\n        {\r\n            @Nullable\r\n            @Override\r\n            protected Map<String, String> getParams() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<>();\r\n                params.put(\"user_id\", Integer.toString(userId));\r\n                params.put(\"pickup_time\", pickupTime);\r\n                params.put(\"total_price\", Double.toString(totalPrice));\r\n                return params;\r\n            }\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(context);\r\n        queue.add(stringRequest);\r\n    }\r\n\r\n    private static void insertOrderCoffee(int transactionId, CoffeeItem coffeeItem, Context context) {\r\n//        System.out.println(coffeeItem.getName());\r\n        StringRequest orderCoffeeRequest = new StringRequest(Request.Method.POST,\r\n                \"http://\" + MainActivity.LOCAL_IP + \"/insertOrderCoffee.php\",\r\n                new Response.Listener<String>() {\r\n                    @Override\r\n                    public void onResponse(String response) {\r\n                        try {\r\n                            JSONObject jsonObject = new JSONObject(response);\r\n                            String success = jsonObject.getString(\"success\");\r\n                            if (success.equals(\"1\")) {\r\n                                int order_coffee_id = jsonObject.getInt(\"order_coffee_id\");\r\n\r\n                                // Insert toppings for this coffee item\r\n                                List<ToppingItem> toppingItemList = coffeeItem.getToppingItemList();\r\n                                for (ToppingItem topping : toppingItemList) {\r\n                                    insertOrderTopping(order_coffee_id, topping, context);\r\n                                }\r\n\r\n                                // Insert flavors for this coffee item\r\n                                List<FlavorItem> flavorItemList = coffeeItem.getFlavorItemList();\r\n                                for (FlavorItem flavor : flavorItemList) {\r\n                                    insertOrderFlavor(order_coffee_id, flavor, context);\r\n                                }\r\n                            } else {\r\n                                Toast.makeText(context, \"Unable to insert beverage to database\", Toast.LENGTH_LONG).show();\r\n                            }\r\n                        } catch (JSONException e) {\r\n                            throw new RuntimeException(e);\r\n                        }\r\n                    }\r\n                }, new Response.ErrorListener() {\r\n            @Override\r\n            public void onErrorResponse(VolleyError error) {\r\n                Toast.makeText(context, \"error:\" + error.getMessage(), Toast.LENGTH_LONG).show();\r\n            }\r\n        })\r\n        {\r\n            @Nullable\r\n            @Override\r\n            protected Map<String, String> getParams() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<>();\r\n                params.put(\"transaction_id\", Integer.toString(transactionId));\r\n                params.put(\"coffee_id\", Integer.toString(coffeeItem.getId()));\r\n                params.put(\"beverage_count\", Integer.toString(coffeeItem.getAmount()));\r\n                return params;\r\n            }\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(context);\r\n        queue.add(orderCoffeeRequest);\r\n    }\r\n\r\n    private static void insertOrderTopping(int order_coffee_id, ToppingItem toppingItem, Context context) {\r\n        StringRequest orderCoffeeToppingRequest = new StringRequest(Request.Method.POST,\r\n                \"http://\" + MainActivity.LOCAL_IP + \"/insertOrderTopping.php\",\r\n                new Response.Listener<String>() {\r\n                    @Override\r\n                    public void onResponse(String response) {\r\n                        try {\r\n                            JSONObject jsonObject = new JSONObject(response);\r\n                            String success = jsonObject.getString(\"success\");\r\n                            if (!success.equals(\"1\")) {\r\n                                Toast.makeText(context, \"Unable to insert beverage's topping to database\", Toast.LENGTH_LONG).show();\r\n                            }\r\n                        } catch (JSONException e) {\r\n                            throw new RuntimeException(e);\r\n                        }\r\n                    }\r\n                }, new Response.ErrorListener() {\r\n            @Override\r\n            public void onErrorResponse(VolleyError error) {\r\n                Toast.makeText(context, \"error:\" + error.getMessage(), Toast.LENGTH_LONG).show();\r\n            }\r\n        })\r\n        {\r\n            @Nullable\r\n            @Override\r\n            protected Map<String, String> getParams() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<>();\r\n                params.put(\"order_coffee_id\", Integer.toString(order_coffee_id));\r\n                params.put(\"topping_id\", Integer.toString(toppingItem.getId()));\r\n                return params;\r\n            }\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(context);\r\n        queue.add(orderCoffeeToppingRequest);\r\n    }\r\n\r\n    private static void insertOrderFlavor(int order_coffee_id, FlavorItem flavorItem, Context context) {\r\n        StringRequest orderCoffeeFlavorRequest = new StringRequest(Request.Method.POST,\r\n                \"http://\" + MainActivity.LOCAL_IP + \"/insertOrderFlavor.php\",\r\n                new Response.Listener<String>() {\r\n                    @Override\r\n                    public void onResponse(String response) {\r\n                        try {\r\n                            JSONObject jsonObject = new JSONObject(response);\r\n                            String success = jsonObject.getString(\"success\");\r\n                            if (!success.equals(\"1\")) {\r\n                                Toast.makeText(context, \"Unable to insert beverage's flavor to database\", Toast.LENGTH_LONG).show();\r\n                            }\r\n                        } catch (JSONException e) {\r\n                            throw new RuntimeException(e);\r\n                        }\r\n                    }\r\n                }, new Response.ErrorListener() {\r\n            @Override\r\n            public void onErrorResponse(VolleyError error) {\r\n                Toast.makeText(context, \"error:\" + error.getMessage(), Toast.LENGTH_LONG).show();\r\n            }\r\n        })\r\n        {\r\n            @Nullable\r\n            @Override\r\n            protected Map<String, String> getParams() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<>();\r\n                params.put(\"order_coffee_id\", Integer.toString(order_coffee_id));\r\n                params.put(\"flavor_id\", Integer.toString(flavorItem.getId()));\r\n                return params;\r\n            }\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(context);\r\n        queue.add(orderCoffeeFlavorRequest);\r\n    }\r\n\r\n//    public static void insertTransactionFromCart(int userId, UserCart userCart, String pickupTime, double totalPrice, Context context) {\r\n//        RequestQueue queue = Volley.newRequestQueue(context);\r\n//\r\n//        StringRequest stringRequest = new StringRequest(Request.Method.POST,\r\n//                \"http://\" + MainActivity.LOCAL_IP + \"/insertTransactionFromCart.php\",\r\n//                new Response.Listener<String>() {\r\n//                    @Override\r\n//                    public void onResponse(String response) {\r\n//                        try {\r\n//                            JSONObject jsonObject = new JSONObject(response);\r\n//                            String success = jsonObject.getString(\"success\");\r\n//                            if (success.equals(\"1\")) {\r\n//                                int transaction_id = jsonObject.getInt(\"transaction_id\");\r\n//\r\n//                                // Each coffee in transaction\r\n//                                List<CoffeeItem> coffeeItemList = userCart.getUserCart();\r\n//                                for (CoffeeItem coffeeItem : coffeeItemList) {\r\n//                                    StringRequest orderCoffeeRequest = new StringRequest(Request.Method.POST,\r\n//                                            \"http://\" + MainActivity.LOCAL_IP + \"/insertOrderCoffee.php\",\r\n//                                            new Response.Listener<String>() {\r\n//                                                @Override\r\n//                                                public void onResponse(String response) {\r\n//                                                    try {\r\n//                                                        JSONObject jsonObject = new JSONObject(response);\r\n//                                                        String success = jsonObject.getString(\"success\");\r\n//                                                        if (success.equals(\"1\")) {\r\n//                                                            int order_coffee_id = jsonObject.getInt(\"order_coffee_id\");\r\n//\r\n//                                                            // Toppings per coffee\r\n//                                                            List<ToppingItem> toppingItemList = coffeeItem.getToppingItemList();\r\n//                                                            if (toppingItemList.size() > 0) {\r\n//                                                                for (ToppingItem topping : toppingItemList) {\r\n//                                                                    StringRequest orderToppingRequest = new StringRequest(Request.Method.POST,\r\n//                                                                            \"http://\" + MainActivity.LOCAL_IP + \"/insertOrderTopping.php\",\r\n//                                                                            new Response.Listener<String>() {\r\n//                                                                                @Override\r\n//                                                                                public void onResponse(String response) {\r\n//                                                                                    try {\r\n//                                                                                        JSONObject jsonObject = new JSONObject(response);\r\n//                                                                                        String success = jsonObject.getString(\"success\");\r\n//                                                                                        if (!success.equals(\"1\")) {\r\n//                                                                                            Toast.makeText(context, \"Unable to insert order topping item\", Toast.LENGTH_LONG).show();\r\n//                                                                                        }\r\n//                                                                                    } catch (JSONException e) {\r\n//                                                                                        throw new RuntimeException(e);\r\n//                                                                                    }\r\n//                                                                                }\r\n//                                                                            }, new Response.ErrorListener() {\r\n//                                                                        @Override\r\n//                                                                        public void onErrorResponse(VolleyError error) {\r\n//                                                                            Toast.makeText(context, \"error:\" + error.getMessage(), Toast.LENGTH_LONG).show();\r\n//                                                                        }\r\n//                                                                    })\r\n//                                                                    {\r\n//                                                                        @Nullable\r\n//                                                                        @Override\r\n//                                                                        protected Map<String, String> getParams() throws AuthFailureError {\r\n//                                                                            Map<String, String> params = new HashMap<>();\r\n//                                                                            params.put(\"order_coffee_id\", Integer.toString(order_coffee_id));\r\n//                                                                            params.put(\"topping_id\", Integer.toString(topping.getId()));\r\n//                                                                            return params;\r\n//                                                                        }\r\n//                                                                    };\r\n//                                                                    queue.add(orderToppingRequest);\r\n//                                                                }\r\n//                                                            }\r\n//\r\n//                                                            // Flavors per coffee\r\n//                                                            List<FlavorItem> flavorItemList = coffeeItem.getFlavorItemList();\r\n//                                                            if (toppingItemList.size() > 0) {\r\n//                                                                for (FlavorItem flavor : flavorItemList) {\r\n//                                                                    StringRequest orderToppingRequest = new StringRequest(Request.Method.POST,\r\n//                                                                            \"http://\" + MainActivity.LOCAL_IP + \"/insertOrderFlavor.php\",\r\n//                                                                            new Response.Listener<String>() {\r\n//                                                                                @Override\r\n//                                                                                public void onResponse(String response) {\r\n//                                                                                    try {\r\n//                                                                                        JSONObject jsonObject = new JSONObject(response);\r\n//                                                                                        String success = jsonObject.getString(\"success\");\r\n//                                                                                        if (!success.equals(\"1\")) {\r\n//                                                                                            Toast.makeText(context, \"Unable to insert order flavor item\", Toast.LENGTH_LONG).show();\r\n//                                                                                        }\r\n//                                                                                    } catch (JSONException e) {\r\n//                                                                                        throw new RuntimeException(e);\r\n//                                                                                    }\r\n//                                                                                }\r\n//                                                                            }, new Response.ErrorListener() {\r\n//                                                                        @Override\r\n//                                                                        public void onErrorResponse(VolleyError error) {\r\n//                                                                            Toast.makeText(context, \"error:\" + error.getMessage(), Toast.LENGTH_LONG).show();\r\n//                                                                        }\r\n//                                                                    })\r\n//                                                                    {\r\n//                                                                        @Nullable\r\n//                                                                        @Override\r\n//                                                                        protected Map<String, String> getParams() throws AuthFailureError {\r\n//                                                                            Map<String, String> params = new HashMap<>();\r\n//                                                                            params.put(\"order_coffee_id\", Integer.toString(order_coffee_id));\r\n//                                                                            params.put(\"flavor_id\", Integer.toString(flavor.getId()));\r\n//                                                                            return params;\r\n//                                                                        }\r\n//                                                                    };\r\n//                                                                    queue.add(orderToppingRequest);\r\n//                                                                }\r\n//                                                            }\r\n//                                                        } else {\r\n//                                                            Toast.makeText(context, \"Unable to insert order coffee item\", Toast.LENGTH_LONG).show();\r\n//                                                        }\r\n//                                                    } catch (JSONException e) {\r\n//                                                        throw new RuntimeException(e);\r\n//                                                    }\r\n//                                                }\r\n//                                            }, new Response.ErrorListener() {\r\n//                                        @Override\r\n//                                        public void onErrorResponse(VolleyError error) {\r\n//                                            Toast.makeText(context, \"error:\" + error.getMessage(), Toast.LENGTH_LONG).show();\r\n//                                        }\r\n//                                    })\r\n//                                    {\r\n//                                        @Nullable\r\n//                                        @Override\r\n//                                        protected Map<String, String> getParams() throws AuthFailureError {\r\n//                                            Map<String, String> params = new HashMap<>();\r\n//                                            params.put(\"transaction_id\", Integer.toString(transaction_id));\r\n//                                            params.put(\"coffee_id\", Integer.toString(coffeeItem.getId()));\r\n//                                            params.put(\"beverage_count\", Integer.toString(coffeeItem.getAmount()));\r\n//                                            return params;\r\n//                                        }\r\n//                                    };\r\n//\r\n//                                    queue.add(orderCoffeeRequest);\r\n//\r\n//\r\n//                                }\r\n//\r\n//                                Toast.makeText(context, \"Transaction successfully inserted!\", Toast.LENGTH_LONG).show();\r\n//                            } else {\r\n//                                Toast.makeText(context, \"Unable to insert transaction\", Toast.LENGTH_LONG).show();\r\n//                            }\r\n//                        } catch (JSONException e) {\r\n//                            throw new RuntimeException(e);\r\n//                        }\r\n//                    }\r\n//                }, new Response.ErrorListener() {\r\n//            @Override\r\n//            public void onErrorResponse(VolleyError error) {\r\n//                Toast.makeText(context, \"error:\" + error.getMessage(), Toast.LENGTH_LONG).show();\r\n//            }\r\n//        })\r\n//        {\r\n//            @Nullable\r\n//            @Override\r\n//            protected Map<String, String> getParams() throws AuthFailureError {\r\n//                Map<String, String> params = new HashMap<>();\r\n//                params.put(\"user_id\", Integer.toString(userId));\r\n//                params.put(\"pickup_time\", pickupTime);\r\n//                params.put(\"price\", Double.toString(totalPrice));\r\n//                return params;\r\n//            }\r\n//        };\r\n//        queue.add(stringRequest);\r\n//    }\r\n//\r\n//\r\n//    public static List<CoffeeItemInCatalog> getAllActiveCoffeeTypes(Context context) {\r\n//        List<CoffeeItemInCatalog> coffees = new ArrayList<>();\r\n//        JsonObjectRequest jsonObjectRequest = new JsonObjectRequest(Request.Method.POST,\r\n//            \"http://\" + MainActivity.LOCAL_IP + \"/getAllActiveCoffeeTypes.php\",\r\n//                null,\r\n//                new Response.Listener<JSONObject>() {\r\n//                    @Override\r\n//                    public void onResponse(JSONObject response) {\r\n//                        try {\r\n//                            JSONArray coffeeItemsArray = response.getJSONArray(\"data\");\r\n//                            for (int i = 0; i < coffeeItemsArray.length(); i++) {\r\n//                                JSONObject coffeeItemObject = coffeeItemsArray.getJSONObject(i);\r\n//                                int id = coffeeItemObject.getInt(\"coffee_id\");\r\n//                                String name = coffeeItemObject.getString(\"name\");\r\n//                                String description = coffeeItemObject.getString(\"description\");\r\n//                                double price = coffeeItemObject.getDouble(\"price\");\r\n//                                CoffeeItemInCatalog coffeeItemInCatalog = new CoffeeItemInCatalog(id, name, description, price);\r\n//                                coffees.add(coffeeItemInCatalog);\r\n//                            }\r\n//                        } catch (JSONException e) {\r\n//                            e.printStackTrace();\r\n//                        }\r\n//                    }\r\n//                },\r\n//                new Response.ErrorListener() {\r\n//                    @Override\r\n//                    public void onErrorResponse(VolleyError error) {\r\n//                        Toast.makeText(context, \"Error: \" + error.getMessage(), Toast.LENGTH_LONG).show();\r\n//                    }\r\n//                });\r\n//\r\n//        // Add the request to the request queue\r\n//        RequestQueue requestQueue = Volley.newRequestQueue(context);\r\n//        requestQueue.add(jsonObjectRequest);\r\n//        return coffees;\r\n//    }\r\n\r\n    public static List<CoffeeItemInCatalog> getAllActiveCoffeeTypes(Context context) {\r\n        List<CoffeeItemInCatalog> coffees = new ArrayList<>();\r\n        JsonObjectRequest jsonObjectRequest = new JsonObjectRequest(Request.Method.POST,\r\n                \"http://\" + MainActivity.LOCAL_IP + \"/getAllActiveCoffeeTypes.php\",\r\n                null,\r\n                new Response.Listener<JSONObject>() {\r\n                    @Override\r\n                    public void onResponse(JSONObject response) {\r\n                        try {\r\n                            JSONArray coffeeItemsArray = response.getJSONArray(\"data\");\r\n                            for (int i = 0; i < coffeeItemsArray.length(); i++) {\r\n                                JSONObject coffeeItemObject = coffeeItemsArray.getJSONObject(i);\r\n                                int id = coffeeItemObject.getInt(\"coffee_id\");\r\n                                String name = coffeeItemObject.getString(\"name\");\r\n                                String description = coffeeItemObject.getString(\"description\");\r\n                                double price = coffeeItemObject.getDouble(\"price\");\r\n                                CoffeeItemInCatalog coffeeItemInCatalog = new CoffeeItemInCatalog(id, name, description, price);\r\n                                coffees.add(coffeeItemInCatalog);\r\n                            }\r\n                        } catch (JSONException e) {\r\n                            e.printStackTrace();\r\n                        }\r\n                    }\r\n                },\r\n                new Response.ErrorListener() {\r\n                    @Override\r\n                    public void onErrorResponse(VolleyError error) {\r\n                        Toast.makeText(context, \"Error: \" + error.getMessage(), Toast.LENGTH_LONG).show();\r\n                    }\r\n                });\r\n\r\n        // Add the request to the request queue\r\n        RequestQueue requestQueue = Volley.newRequestQueue(context);\r\n        requestQueue.add(jsonObjectRequest);\r\n        return coffees;\r\n    }\r\n\r\n    public static List<FlavorItemInCatalog> getAllActiveFlavorTypes(Context context) {\r\n        List<FlavorItemInCatalog> flavors = new ArrayList<>();\r\n        JsonObjectRequest jsonObjectRequest = new JsonObjectRequest(Request.Method.POST,\r\n                \"http://\" + MainActivity.LOCAL_IP + \"/getAllActiveFlavorTypes.php\",\r\n                null,\r\n                new Response.Listener<JSONObject>() {\r\n                    @Override\r\n                    public void onResponse(JSONObject response) {\r\n                        try {\r\n                            JSONArray flavorItemsArray = response.getJSONArray(\"data\");\r\n                            for (int i = 0; i < flavorItemsArray.length(); i++) {\r\n                                JSONObject flavorItemObject = flavorItemsArray.getJSONObject(i);\r\n                                int id = flavorItemObject.getInt(\"flavor_id\");\r\n                                String name = flavorItemObject.getString(\"name\");\r\n                                String description = flavorItemObject.getString(\"description\");\r\n                                double price = flavorItemObject.getDouble(\"price\");\r\n                                FlavorItemInCatalog flavorItemInCatalog = new FlavorItemInCatalog(id, name, description, price);\r\n                                flavors.add(flavorItemInCatalog);\r\n                            }\r\n                        } catch (JSONException e) {\r\n                            e.printStackTrace();\r\n                        }\r\n                    }\r\n                },\r\n                new Response.ErrorListener() {\r\n                    @Override\r\n                    public void onErrorResponse(VolleyError error) {\r\n                        Toast.makeText(context, \"Error: \" + error.getMessage(), Toast.LENGTH_LONG).show();\r\n                    }\r\n                });\r\n\r\n        // Add the request to the request queue\r\n        RequestQueue requestQueue = Volley.newRequestQueue(context);\r\n        requestQueue.add(jsonObjectRequest);\r\n        return flavors;\r\n    }\r\n\r\n    public static List<ToppingItemInCatalog> getAllActiveToppingTypes(Context context) {\r\n        List<ToppingItemInCatalog> toppings = new ArrayList<>();\r\n        JsonObjectRequest jsonObjectRequest = new JsonObjectRequest(Request.Method.POST,\r\n                \"http://\" + MainActivity.LOCAL_IP + \"/getAllActiveToppingTypes.php\",\r\n                null,\r\n                new Response.Listener<JSONObject>() {\r\n                    @Override\r\n                    public void onResponse(JSONObject response) {\r\n                        try {\r\n                            JSONArray toppingItemsArray = response.getJSONArray(\"data\");\r\n                            for (int i = 0; i < toppingItemsArray.length(); i++) {\r\n                                JSONObject toppingItemObject = toppingItemsArray.getJSONObject(i);\r\n                                int id = toppingItemObject.getInt(\"topping_id\");\r\n                                String name = toppingItemObject.getString(\"name\");\r\n                                String description = toppingItemObject.getString(\"description\");\r\n                                double price = toppingItemObject.getDouble(\"price\");\r\n                                ToppingItemInCatalog toppingItemInCatalog = new ToppingItemInCatalog(id, name, description, price);\r\n                                toppings.add(toppingItemInCatalog);\r\n                            }\r\n                        } catch (JSONException e) {\r\n                            e.printStackTrace();\r\n                        }\r\n                    }\r\n                },\r\n                new Response.ErrorListener() {\r\n                    @Override\r\n                    public void onErrorResponse(VolleyError error) {\r\n                        Toast.makeText(context, \"Error: \" + error.getMessage(), Toast.LENGTH_LONG).show();\r\n                    }\r\n                });\r\n\r\n        // Add the request to the request queue\r\n        RequestQueue requestQueue = Volley.newRequestQueue(context);\r\n        requestQueue.add(jsonObjectRequest);\r\n        return toppings;\r\n    }\r\n\r\n    public static void insertCoffee(String name, String description, double price, Context context) {\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST,\r\n                \"http://\" + MainActivity.LOCAL_IP + \"/addCoffee.php\",\r\n                new Response.Listener<String>() {\r\n                    @Override\r\n                    public void onResponse(String response) {\r\n                        try {\r\n                            JSONObject jsonObject = new JSONObject(response);\r\n                            String success = jsonObject.getString(\"success\");\r\n                            if (success.equals(\"1\")) {\r\n                                Toast.makeText(context, \"Coffee successfully added to catalog!\", Toast.LENGTH_LONG).show();\r\n                            } else {\r\n                                Toast.makeText(context, \"Unable to add coffee to catalog\", Toast.LENGTH_LONG).show();\r\n                            }\r\n                        } catch (JSONException e) {\r\n                            throw new RuntimeException(e);\r\n                        }\r\n                    }\r\n                }, new Response.ErrorListener() {\r\n                    @Override\r\n                    public void onErrorResponse(VolleyError error) {\r\n                        Toast.makeText(context, \"error:\" + error.getMessage(), Toast.LENGTH_LONG).show();\r\n                    }\r\n                })\r\n        {\r\n            @Nullable\r\n            @Override\r\n            protected Map<String, String> getParams() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<>();\r\n                params.put(\"name\", name);\r\n                params.put(\"description\", description);\r\n                params.put(\"price\", Double.toString(price));\r\n                return params;\r\n            }\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(context);\r\n        queue.add(stringRequest);\r\n\r\n        // Refresh coffee list in MainActivity\r\n        MainActivity.coffeeItemInCatalogTypes = getAllActiveCoffeeTypes(context);\r\n    }\r\n\r\n    public static void insertFlavor(String name, String description, double price, Context context) {\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST,\r\n                \"http://\" + MainActivity.LOCAL_IP + \"/addFlavor.php\",\r\n                new Response.Listener<String>() {\r\n                    @Override\r\n                    public void onResponse(String response) {\r\n                        try {\r\n                            JSONObject jsonObject = new JSONObject(response);\r\n                            String success = jsonObject.getString(\"success\");\r\n                            if (success.equals(\"1\")) {\r\n                                Toast.makeText(context, \"Flavor successfully added to catalog!\", Toast.LENGTH_LONG).show();\r\n                            } else {\r\n                                Toast.makeText(context, \"Unable to add flavor to catalog\", Toast.LENGTH_LONG).show();\r\n                            }\r\n                        } catch (JSONException e) {\r\n                            throw new RuntimeException(e);\r\n                        }\r\n                    }\r\n                }, new Response.ErrorListener() {\r\n            @Override\r\n            public void onErrorResponse(VolleyError error) {\r\n                Toast.makeText(context, \"error:\" + error.getMessage(), Toast.LENGTH_LONG).show();\r\n            }\r\n            })\r\n        {\r\n            @Nullable\r\n            @Override\r\n            protected Map<String, String> getParams() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<>();\r\n                params.put(\"name\", name);\r\n                params.put(\"description\", description);\r\n                params.put(\"price\", Double.toString(price));\r\n                return params;\r\n            }\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(context);\r\n        queue.add(stringRequest);\r\n\r\n        // Refresh flavor list in MainActivity\r\n        MainActivity.flavorItemInCatalogTypes = getAllActiveFlavorTypes(context);\r\n    }\r\n\r\n    public static void insertTopping(String name, String description, double price, Context context) {\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST,\r\n                \"http://\" + MainActivity.LOCAL_IP + \"/addTopping.php\",\r\n                new Response.Listener<String>() {\r\n                    @Override\r\n                    public void onResponse(String response) {\r\n                        try {\r\n                            JSONObject jsonObject = new JSONObject(response);\r\n                            String success = jsonObject.getString(\"success\");\r\n                            if (success.equals(\"1\")) {\r\n                                Toast.makeText(context, \"Topping successfully added to catalog!\", Toast.LENGTH_LONG).show();\r\n                            } else {\r\n                                Toast.makeText(context, \"Unable to add topping to catalog\", Toast.LENGTH_LONG).show();\r\n                            }\r\n                        } catch (JSONException e) {\r\n                            throw new RuntimeException(e);\r\n                        }\r\n                    }\r\n                }, new Response.ErrorListener() {\r\n            @Override\r\n            public void onErrorResponse(VolleyError error) {\r\n                Toast.makeText(context, \"error:\" + error.getMessage(), Toast.LENGTH_LONG).show();\r\n            }\r\n            })\r\n        {\r\n            @Nullable\r\n            @Override\r\n            protected Map<String, String> getParams() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<>();\r\n                params.put(\"name\", name);\r\n                params.put(\"description\", description);\r\n                params.put(\"price\", Double.toString(price));\r\n                return params;\r\n            }\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(context);\r\n        queue.add(stringRequest);\r\n\r\n        // Refresh topping list in MainActivity\r\n        MainActivity.toppingItemInCatalogTypes = getAllActiveToppingTypes(context);\r\n    }\r\n\r\n    public static void toggleDisableCoffee(String name, Context context) {\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST,\r\n                \"http://\" + MainActivity.LOCAL_IP + \"/toggleDisableCoffee.php\",\r\n                new Response.Listener<String>() {\r\n                    @Override\r\n                    public void onResponse(String response) {\r\n                        try {\r\n                            JSONObject jsonObject = new JSONObject(response);\r\n                            String success = jsonObject.getString(\"success\");\r\n                            if (success.equals(\"1\")) {\r\n                                Toast.makeText(context, name + \" Coffee is no longer active\", Toast.LENGTH_LONG).show();\r\n                            } else {\r\n                                Toast.makeText(context, \"Unable to make \" + name + \" inactive\", Toast.LENGTH_LONG).show();\r\n                            }\r\n                        } catch (JSONException e) {\r\n                            throw new RuntimeException(e);\r\n                        }\r\n                    }\r\n                }, new Response.ErrorListener() {\r\n            @Override\r\n            public void onErrorResponse(VolleyError error) {\r\n                Toast.makeText(context, \"error:\" + error.getMessage(), Toast.LENGTH_LONG).show();\r\n            }\r\n        })\r\n        {\r\n            @Nullable\r\n            @Override\r\n            protected Map<String, String> getParams() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<>();\r\n                params.put(\"name\", name);\r\n                return params;\r\n            }\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(context);\r\n        queue.add(stringRequest);\r\n\r\n        // Refresh coffee list in MainActivity\r\n        MainActivity.coffeeItemInCatalogTypes = getAllActiveCoffeeTypes(context);\r\n    }\r\n\r\n    public static void toggleDisableTopping(String name, Context context) {\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST,\r\n                \"http://\" + MainActivity.LOCAL_IP + \"/toggleDisableTopping.php\",\r\n                new Response.Listener<String>() {\r\n                    @Override\r\n                    public void onResponse(String response) {\r\n                        try {\r\n                            JSONObject jsonObject = new JSONObject(response);\r\n                            String success = jsonObject.getString(\"success\");\r\n                            if (success.equals(\"1\")) {\r\n                                Toast.makeText(context, name + \" Topping is no longer active\", Toast.LENGTH_LONG).show();\r\n                            } else {\r\n                                Toast.makeText(context, \"Unable to make \" + name + \" inactive\", Toast.LENGTH_LONG).show();\r\n                            }\r\n                        } catch (JSONException e) {\r\n                            throw new RuntimeException(e);\r\n                        }\r\n                    }\r\n                }, new Response.ErrorListener() {\r\n            @Override\r\n            public void onErrorResponse(VolleyError error) {\r\n                Toast.makeText(context, \"error:\" + error.getMessage(), Toast.LENGTH_LONG).show();\r\n            }\r\n        })\r\n        {\r\n            @Nullable\r\n            @Override\r\n            protected Map<String, String> getParams() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<>();\r\n                params.put(\"name\", name);\r\n                return params;\r\n            }\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(context);\r\n        queue.add(stringRequest);\r\n\r\n        // Refresh topping list in MainActivity\r\n        MainActivity.toppingItemInCatalogTypes = getAllActiveToppingTypes(context);\r\n    }\r\n\r\n    public static void toggleDisableFlavor(String name, Context context) {\r\n        StringRequest stringRequest = new StringRequest(Request.Method.POST,\r\n                \"http://\" + MainActivity.LOCAL_IP + \"/toggleDisableFlavor.php\",\r\n                new Response.Listener<String>() {\r\n                    @Override\r\n                    public void onResponse(String response) {\r\n                        try {\r\n                            JSONObject jsonObject = new JSONObject(response);\r\n                            String success = jsonObject.getString(\"success\");\r\n                            if (success.equals(\"1\")) {\r\n                                Toast.makeText(context, name + \" Flavor is no longer active\", Toast.LENGTH_LONG).show();\r\n                            } else {\r\n                                Toast.makeText(context, \"Unable to make \" + name + \" inactive\", Toast.LENGTH_LONG).show();\r\n                            }\r\n                        } catch (JSONException e) {\r\n                            throw new RuntimeException(e);\r\n                        }\r\n                    }\r\n                }, new Response.ErrorListener() {\r\n            @Override\r\n            public void onErrorResponse(VolleyError error) {\r\n                Toast.makeText(context, \"error:\" + error.getMessage(), Toast.LENGTH_LONG).show();\r\n            }\r\n        })\r\n        {\r\n            @Nullable\r\n            @Override\r\n            protected Map<String, String> getParams() throws AuthFailureError {\r\n                Map<String, String> params = new HashMap<>();\r\n                params.put(\"name\", name);\r\n                return params;\r\n            }\r\n        };\r\n\r\n        RequestQueue queue = Volley.newRequestQueue(context);\r\n        queue.add(stringRequest);\r\n\r\n        // Refresh flavor list in MainActivity\r\n        MainActivity.flavorItemInCatalogTypes = getAllActiveFlavorTypes(context);\r\n    }\r\n\r\n\r\n    private void setSessionId(HttpURLConnection connection, String sessionId) {\r\n        if (sessionId != null) {\r\n            connection.setRequestProperty(\"Cookie\", \"sessionid=\" + sessionId);\r\n        }\r\n    }\r\n\r\n    private String getSessionId(HttpURLConnection connection) {\r\n        String headerName;\r\n        for (int i = 1; (headerName = connection.getHeaderFieldKey(i)) != null; i++) {\r\n            if (headerName.equals(\"Set-Cookie\")) {\r\n                String cookie = connection.getHeaderField(i);\r\n                return cookie.substring(cookie.indexOf(\"=\") + 1, cookie.indexOf(\";\"));\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/cjcj55/scrum_project_1/db/MySQLDatabaseHelper.java b/app/src/main/java/com/cjcj55/scrum_project_1/db/MySQLDatabaseHelper.java
--- a/app/src/main/java/com/cjcj55/scrum_project_1/db/MySQLDatabaseHelper.java	(revision c1194d0c226386a5e5331d00f67534ea4b23aa3a)
+++ b/app/src/main/java/com/cjcj55/scrum_project_1/db/MySQLDatabaseHelper.java	(date 1677124434357)
@@ -36,11 +36,12 @@
     public static void getAllTransactionsForUser(int userId, Context context, TransactionsCallback callback) {
         List<UserCart> transactions = new ArrayList<>();
 
-        StringRequest stringRequest = new StringRequest(Request.Method.POST,
+        JsonObjectRequest jsonObjectRequest = new JsonObjectRequest(Request.Method.POST,
                 "http://" + MainActivity.LOCAL_IP + "/getAllTransactionsForUser.php",
-                new Response.Listener<String>() {
+                null,
+                new Response.Listener<JSONObject>() {
                     @Override
-                    public void onResponse(String response) {
+                    public void onResponse(JSONObject response) {
                         try {
                             JSONArray jsonArray = new JSONArray(response);
                             for (int i = 0; i < jsonArray.length(); i++) {
@@ -82,7 +83,7 @@
         };
 
         RequestQueue queue = Volley.newRequestQueue(context);
-        queue.add(stringRequest);
+        queue.add(jsonObjectRequest);
     }
 
     public interface TransactionsCallback {
@@ -92,12 +93,13 @@
     private static List<CoffeeItem> getCoffeeItemsForTransaction(int transactionId, Context context) {
         List<CoffeeItem> coffeeItems = new ArrayList<>();
 
-        StringRequest stringRequest = new StringRequest(Request.Method.POST,
+        JsonObjectRequest jsonObjectRequest = new JsonObjectRequest(Request.Method.POST,
                 "http://" + MainActivity.LOCAL_IP + "/getCoffeeItemsForTransaction.php",
-                new Response.Listener<String>() {
+                null,
+                new Response.Listener<JSONObject>() {
 
                     @Override
-                    public void onResponse(String response) {
+                    public void onResponse(JSONObject response) {
                         try {
                             JSONArray jsonArray = new JSONArray(response);
                             for (int i = 0; i < jsonArray.length(); i++) {
@@ -107,8 +109,6 @@
                                 int beverage_count = jsonObject.getInt("beverage_count");
                                 int order_coffee_id = jsonObject.getInt("order_coffee_id");
 
-//                                System.out.println(coffee_id + ": " + beverage_count + ", " + order_coffee_id);
-
                                 // Get toppings for this coffee item
                                 List<ToppingItem> toppingItems = getToppingItemsForOrderCoffee(order_coffee_id, context);
 
@@ -127,6 +127,7 @@
                                 coffeeItem.setToppingItemList(toppingItems);
                                 coffeeItem.setFlavorItemList(flavorItems);
                                 coffeeItems.add(coffeeItem);
+//                                System.out.println(coffeeItems.get(i).getName() + ", " + coffeeItems.get(i).getId());
                             }
                         } catch (JSONException e) {
                             throw new RuntimeException(e);
@@ -149,7 +150,7 @@
         };
 
         RequestQueue queue = Volley.newRequestQueue(context);
-        queue.add(stringRequest);
+        queue.add(jsonObjectRequest);
 
         return coffeeItems;
     }
@@ -157,11 +158,12 @@
     private static List<ToppingItem> getToppingItemsForOrderCoffee(int orderCoffeeId, Context context) {
         List<ToppingItem> toppingItems = new ArrayList<>();
 
-        StringRequest stringRequest = new StringRequest(Request.Method.POST,
+        JsonObjectRequest json = new JsonObjectRequest(Request.Method.POST,
                 "http://" + MainActivity.LOCAL_IP + "/getToppingItemsForOrderCoffee.php",
-                new Response.Listener<String>() {
+                null,
+                new Response.Listener<JSONObject>() {
                     @Override
-                    public void onResponse(String response) {
+                    public void onResponse(JSONObject response) {
                         try {
                             JSONArray jsonArray = new JSONArray(response);
                             for (int i = 0; i < jsonArray.length(); i++) {
@@ -202,7 +204,7 @@
         };
 
         RequestQueue queue = Volley.newRequestQueue(context);
-        queue.add(stringRequest);
+        queue.add(json);
 
         return toppingItems;
     }
@@ -210,11 +212,12 @@
     private static List<FlavorItem> getFlavorItemsForOrderCoffee(int orderCoffeeId, Context context) {
         List<FlavorItem> flavorItems = new ArrayList<>();
 
-        StringRequest stringRequest = new StringRequest(Request.Method.POST,
+        JsonObjectRequest jsonObjectRequest = new JsonObjectRequest(Request.Method.POST,
                 "http://" + MainActivity.LOCAL_IP + "/getFlavorItemsForOrderCoffee.php",
-                new Response.Listener<String>() {
+                null,
+                new Response.Listener<JSONObject>() {
                     @Override
-                    public void onResponse(String response) {
+                    public void onResponse(JSONObject response) {
                         try {
                             JSONArray jsonArray = new JSONArray(response);
                             for (int i = 0; i < jsonArray.length(); i++) {
@@ -255,7 +258,7 @@
         };
 
         RequestQueue queue = Volley.newRequestQueue(context);
-        queue.add(stringRequest);
+        queue.add(jsonObjectRequest);
 
         return flavorItems;
     }
@@ -435,207 +438,6 @@
         queue.add(orderCoffeeFlavorRequest);
     }
 
-//    public static void insertTransactionFromCart(int userId, UserCart userCart, String pickupTime, double totalPrice, Context context) {
-//        RequestQueue queue = Volley.newRequestQueue(context);
-//
-//        StringRequest stringRequest = new StringRequest(Request.Method.POST,
-//                "http://" + MainActivity.LOCAL_IP + "/insertTransactionFromCart.php",
-//                new Response.Listener<String>() {
-//                    @Override
-//                    public void onResponse(String response) {
-//                        try {
-//                            JSONObject jsonObject = new JSONObject(response);
-//                            String success = jsonObject.getString("success");
-//                            if (success.equals("1")) {
-//                                int transaction_id = jsonObject.getInt("transaction_id");
-//
-//                                // Each coffee in transaction
-//                                List<CoffeeItem> coffeeItemList = userCart.getUserCart();
-//                                for (CoffeeItem coffeeItem : coffeeItemList) {
-//                                    StringRequest orderCoffeeRequest = new StringRequest(Request.Method.POST,
-//                                            "http://" + MainActivity.LOCAL_IP + "/insertOrderCoffee.php",
-//                                            new Response.Listener<String>() {
-//                                                @Override
-//                                                public void onResponse(String response) {
-//                                                    try {
-//                                                        JSONObject jsonObject = new JSONObject(response);
-//                                                        String success = jsonObject.getString("success");
-//                                                        if (success.equals("1")) {
-//                                                            int order_coffee_id = jsonObject.getInt("order_coffee_id");
-//
-//                                                            // Toppings per coffee
-//                                                            List<ToppingItem> toppingItemList = coffeeItem.getToppingItemList();
-//                                                            if (toppingItemList.size() > 0) {
-//                                                                for (ToppingItem topping : toppingItemList) {
-//                                                                    StringRequest orderToppingRequest = new StringRequest(Request.Method.POST,
-//                                                                            "http://" + MainActivity.LOCAL_IP + "/insertOrderTopping.php",
-//                                                                            new Response.Listener<String>() {
-//                                                                                @Override
-//                                                                                public void onResponse(String response) {
-//                                                                                    try {
-//                                                                                        JSONObject jsonObject = new JSONObject(response);
-//                                                                                        String success = jsonObject.getString("success");
-//                                                                                        if (!success.equals("1")) {
-//                                                                                            Toast.makeText(context, "Unable to insert order topping item", Toast.LENGTH_LONG).show();
-//                                                                                        }
-//                                                                                    } catch (JSONException e) {
-//                                                                                        throw new RuntimeException(e);
-//                                                                                    }
-//                                                                                }
-//                                                                            }, new Response.ErrorListener() {
-//                                                                        @Override
-//                                                                        public void onErrorResponse(VolleyError error) {
-//                                                                            Toast.makeText(context, "error:" + error.getMessage(), Toast.LENGTH_LONG).show();
-//                                                                        }
-//                                                                    })
-//                                                                    {
-//                                                                        @Nullable
-//                                                                        @Override
-//                                                                        protected Map<String, String> getParams() throws AuthFailureError {
-//                                                                            Map<String, String> params = new HashMap<>();
-//                                                                            params.put("order_coffee_id", Integer.toString(order_coffee_id));
-//                                                                            params.put("topping_id", Integer.toString(topping.getId()));
-//                                                                            return params;
-//                                                                        }
-//                                                                    };
-//                                                                    queue.add(orderToppingRequest);
-//                                                                }
-//                                                            }
-//
-//                                                            // Flavors per coffee
-//                                                            List<FlavorItem> flavorItemList = coffeeItem.getFlavorItemList();
-//                                                            if (toppingItemList.size() > 0) {
-//                                                                for (FlavorItem flavor : flavorItemList) {
-//                                                                    StringRequest orderToppingRequest = new StringRequest(Request.Method.POST,
-//                                                                            "http://" + MainActivity.LOCAL_IP + "/insertOrderFlavor.php",
-//                                                                            new Response.Listener<String>() {
-//                                                                                @Override
-//                                                                                public void onResponse(String response) {
-//                                                                                    try {
-//                                                                                        JSONObject jsonObject = new JSONObject(response);
-//                                                                                        String success = jsonObject.getString("success");
-//                                                                                        if (!success.equals("1")) {
-//                                                                                            Toast.makeText(context, "Unable to insert order flavor item", Toast.LENGTH_LONG).show();
-//                                                                                        }
-//                                                                                    } catch (JSONException e) {
-//                                                                                        throw new RuntimeException(e);
-//                                                                                    }
-//                                                                                }
-//                                                                            }, new Response.ErrorListener() {
-//                                                                        @Override
-//                                                                        public void onErrorResponse(VolleyError error) {
-//                                                                            Toast.makeText(context, "error:" + error.getMessage(), Toast.LENGTH_LONG).show();
-//                                                                        }
-//                                                                    })
-//                                                                    {
-//                                                                        @Nullable
-//                                                                        @Override
-//                                                                        protected Map<String, String> getParams() throws AuthFailureError {
-//                                                                            Map<String, String> params = new HashMap<>();
-//                                                                            params.put("order_coffee_id", Integer.toString(order_coffee_id));
-//                                                                            params.put("flavor_id", Integer.toString(flavor.getId()));
-//                                                                            return params;
-//                                                                        }
-//                                                                    };
-//                                                                    queue.add(orderToppingRequest);
-//                                                                }
-//                                                            }
-//                                                        } else {
-//                                                            Toast.makeText(context, "Unable to insert order coffee item", Toast.LENGTH_LONG).show();
-//                                                        }
-//                                                    } catch (JSONException e) {
-//                                                        throw new RuntimeException(e);
-//                                                    }
-//                                                }
-//                                            }, new Response.ErrorListener() {
-//                                        @Override
-//                                        public void onErrorResponse(VolleyError error) {
-//                                            Toast.makeText(context, "error:" + error.getMessage(), Toast.LENGTH_LONG).show();
-//                                        }
-//                                    })
-//                                    {
-//                                        @Nullable
-//                                        @Override
-//                                        protected Map<String, String> getParams() throws AuthFailureError {
-//                                            Map<String, String> params = new HashMap<>();
-//                                            params.put("transaction_id", Integer.toString(transaction_id));
-//                                            params.put("coffee_id", Integer.toString(coffeeItem.getId()));
-//                                            params.put("beverage_count", Integer.toString(coffeeItem.getAmount()));
-//                                            return params;
-//                                        }
-//                                    };
-//
-//                                    queue.add(orderCoffeeRequest);
-//
-//
-//                                }
-//
-//                                Toast.makeText(context, "Transaction successfully inserted!", Toast.LENGTH_LONG).show();
-//                            } else {
-//                                Toast.makeText(context, "Unable to insert transaction", Toast.LENGTH_LONG).show();
-//                            }
-//                        } catch (JSONException e) {
-//                            throw new RuntimeException(e);
-//                        }
-//                    }
-//                }, new Response.ErrorListener() {
-//            @Override
-//            public void onErrorResponse(VolleyError error) {
-//                Toast.makeText(context, "error:" + error.getMessage(), Toast.LENGTH_LONG).show();
-//            }
-//        })
-//        {
-//            @Nullable
-//            @Override
-//            protected Map<String, String> getParams() throws AuthFailureError {
-//                Map<String, String> params = new HashMap<>();
-//                params.put("user_id", Integer.toString(userId));
-//                params.put("pickup_time", pickupTime);
-//                params.put("price", Double.toString(totalPrice));
-//                return params;
-//            }
-//        };
-//        queue.add(stringRequest);
-//    }
-//
-//
-//    public static List<CoffeeItemInCatalog> getAllActiveCoffeeTypes(Context context) {
-//        List<CoffeeItemInCatalog> coffees = new ArrayList<>();
-//        JsonObjectRequest jsonObjectRequest = new JsonObjectRequest(Request.Method.POST,
-//            "http://" + MainActivity.LOCAL_IP + "/getAllActiveCoffeeTypes.php",
-//                null,
-//                new Response.Listener<JSONObject>() {
-//                    @Override
-//                    public void onResponse(JSONObject response) {
-//                        try {
-//                            JSONArray coffeeItemsArray = response.getJSONArray("data");
-//                            for (int i = 0; i < coffeeItemsArray.length(); i++) {
-//                                JSONObject coffeeItemObject = coffeeItemsArray.getJSONObject(i);
-//                                int id = coffeeItemObject.getInt("coffee_id");
-//                                String name = coffeeItemObject.getString("name");
-//                                String description = coffeeItemObject.getString("description");
-//                                double price = coffeeItemObject.getDouble("price");
-//                                CoffeeItemInCatalog coffeeItemInCatalog = new CoffeeItemInCatalog(id, name, description, price);
-//                                coffees.add(coffeeItemInCatalog);
-//                            }
-//                        } catch (JSONException e) {
-//                            e.printStackTrace();
-//                        }
-//                    }
-//                },
-//                new Response.ErrorListener() {
-//                    @Override
-//                    public void onErrorResponse(VolleyError error) {
-//                        Toast.makeText(context, "Error: " + error.getMessage(), Toast.LENGTH_LONG).show();
-//                    }
-//                });
-//
-//        // Add the request to the request queue
-//        RequestQueue requestQueue = Volley.newRequestQueue(context);
-//        requestQueue.add(jsonObjectRequest);
-//        return coffees;
-//    }
-
     public static List<CoffeeItemInCatalog> getAllActiveCoffeeTypes(Context context) {
         List<CoffeeItemInCatalog> coffees = new ArrayList<>();
         JsonObjectRequest jsonObjectRequest = new JsonObjectRequest(Request.Method.POST,
